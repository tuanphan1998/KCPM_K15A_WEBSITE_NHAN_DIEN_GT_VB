{"ast":null,"code":"var zip = require('lodash/zip');\n\nvar trimEnd = require('lodash/trimEnd'); // Split a long word up to fit within the word wrap limit.  Use either a\n// character to split looking back from the word wrap limit, or\n// truncate to the word wrap limit.\n\n\nfunction splitLongWord(word, options) {\n  var wrapCharacters = options.longWordSplit.wrapCharacters || [];\n  var forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;\n  var max = options.wordwrap;\n  var fuseWord = [];\n  var idx = 0;\n\n  while (word.length > max) {\n    var firstLine = word.substr(0, max);\n    var remainingChars = word.substr(max);\n    var splitIndex = firstLine.lastIndexOf(wrapCharacters[idx]);\n\n    if (splitIndex > -1) {\n      // We've found a character to split on, store before the split then check if we\n      // need to split again\n      word = firstLine.substr(splitIndex + 1) + remainingChars;\n      fuseWord.push(firstLine.substr(0, splitIndex + 1));\n    } else {\n      idx++;\n\n      if (idx >= wrapCharacters.length) {\n        // Cannot split on character, so either split at 'max' or preserve length\n        if (forceWrapOnLimit) {\n          fuseWord.push(firstLine);\n          word = remainingChars;\n\n          if (word.length > max) {\n            continue;\n          }\n        } else {\n          word = firstLine + remainingChars;\n\n          if (!options.preserveNewlines) {\n            word += '\\n';\n          }\n        }\n\n        break;\n      } else {\n        word = firstLine + remainingChars;\n      }\n    }\n  }\n\n  fuseWord.push(word);\n  return fuseWord.join('\\n');\n}\n\nexports.wordwrap = function wordwrap(text, options) {\n  var max = options.wordwrap;\n  var preserveNewlines = options.preserveNewlines;\n  var length = options.lineCharCount; // Preserve leading space\n\n  var result = text.startsWith(' ') ? ' ' : '';\n  length += result.length;\n  var buffer = []; // Split the text into words, decide to preserve new lines or not.\n\n  var words = preserveNewlines ? text.trim().replace(/\\n/g, '\\n ').split(/\\ +/) : text.trim().split(/\\s+/); // Determine where to end line word by word.\n\n  words.forEach(function (word) {\n    // Add buffer to result if we can't fit any more words in the buffer.\n    if ((max || max === 0) && length > 0 && (length + word.length > max || length + word.indexOf('\\n') > max)) {\n      // Concat buffer and add it to the result\n      result += buffer.join(' ') + '\\n'; // Reset buffer and length\n\n      buffer.length = length = 0;\n    } // Check if the current word is long enough to be wrapped\n\n\n    if ((max || max === 0) && options.longWordSplit && word.length > max) {\n      word = splitLongWord(word, options);\n    }\n\n    buffer.push(word); // If the word contains a newline then restart the count and add the buffer to the result\n\n    if (word.indexOf('\\n') !== -1) {\n      result += buffer.join(' '); // Reset the buffer, let the length include any characters after the last newline\n\n      buffer.length = 0;\n      length = word.length - (word.lastIndexOf('\\n') + 1); // If there are characters after the newline, add a space and increase the length by 1\n\n      if (length) {\n        result += ' ';\n        length++;\n      }\n    } else {\n      // Add word length + one whitespace\n      length += word.length + 1;\n    }\n  }); // Add the rest to the result.\n\n  result += buffer.join(' '); // Preserve trailing space\n\n  if (!text.endsWith(' ')) {\n    result = trimEnd(result);\n  } else if (!result.endsWith(' ')) {\n    result = result + ' ';\n  }\n\n  return result;\n};\n\nexports.arrayZip = function arrayZip(array) {\n  return zip.apply(null, array);\n};\n\nexports.splitCssSearchTag = function splitCssSearchTag(tagString) {\n  function getParams(re, string) {\n    var captures = [],\n        found;\n\n    while ((found = re.exec(string)) !== null) {\n      captures.push(found[1]);\n    }\n\n    return captures;\n  }\n\n  var splitTag = {};\n  var elementRe = /(^\\w*)/g;\n  splitTag.element = elementRe.exec(tagString)[1];\n  splitTag.classes = getParams(/\\.([\\d\\w-]*)/g, tagString);\n  splitTag.ids = getParams(/#([\\d\\w-]*)/g, tagString);\n  return splitTag;\n};\n\nexports.replaceAll = function replaceAll(str, find, replace) {\n  var reg = new RegExp(find, 'g');\n  return str.replace(reg, replace);\n};","map":null,"metadata":{},"sourceType":"script"}