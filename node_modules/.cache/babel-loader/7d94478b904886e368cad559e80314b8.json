{"ast":null,"code":"var includes = require('lodash/includes');\n\nvar trimEnd = require('lodash/trimEnd');\n\nvar htmlparser = require('htmlparser2');\n\nvar helper = require('./helper');\n\nvar defaultFormat = require('./formatter'); // Which type of tags should not be parsed\n\n\nvar SKIP_TYPES = ['style', 'script'];\n\nfunction htmlToText(html, options) {\n  options = Object.assign({\n    wordwrap: 80,\n    tables: [],\n    preserveNewlines: false,\n    uppercaseHeadings: true,\n    singleNewLineParagraphs: false,\n    hideLinkHrefIfSameAsText: false,\n    linkHrefBaseUrl: null,\n    noLinkBrackets: false,\n    noAnchorUrl: true,\n    baseElement: 'body',\n    returnDomByDefault: true,\n    format: {},\n    decodeOptions: {\n      isAttributeValue: false,\n      strict: false\n    },\n    longWordSplit: {\n      wrapCharacters: [],\n      forceWrapOnLimit: false\n    },\n    unorderedListItemPrefix: ' * '\n  }, options || {});\n  var handler = new htmlparser.DefaultHandler(function (error, dom) {}, {\n    verbose: true\n  });\n  new htmlparser.Parser(handler).parseComplete(html);\n  options.lineCharCount = 0;\n  var result = '';\n  var baseElements = Array.isArray(options.baseElement) ? options.baseElement : [options.baseElement];\n\n  for (var idx = 0; idx < baseElements.length; ++idx) {\n    result += walk(filterBody(handler.dom, options, baseElements[idx]), options);\n  }\n\n  return trimEnd(result);\n}\n\nfunction filterBody(dom, options, baseElement) {\n  var result = null;\n  var splitTag = helper.splitCssSearchTag(baseElement);\n\n  function walk(dom) {\n    if (result) return;\n    dom.forEach(function (elem) {\n      if (result) return;\n\n      if (elem.name === splitTag.element) {\n        var documentClasses = elem.attribs && elem.attribs.class ? elem.attribs.class.split(\" \") : [];\n        var documentIds = elem.attribs && elem.attribs.id ? elem.attribs.id.split(\" \") : [];\n\n        if (splitTag.classes.every(function (val) {\n          return documentClasses.indexOf(val) >= 0;\n        }) && splitTag.ids.every(function (val) {\n          return documentIds.indexOf(val) >= 0;\n        })) {\n          result = [elem];\n          return;\n        }\n      }\n\n      if (elem.children) walk(elem.children);\n    });\n  }\n\n  walk(dom);\n  return options.returnDomByDefault ? result || dom : result;\n}\n\nfunction containsTable(attr, tables) {\n  if (tables === true) return true;\n\n  function removePrefix(key) {\n    return key.substr(1);\n  }\n\n  function checkPrefix(prefix) {\n    return function (key) {\n      return key.startsWith(prefix);\n    };\n  }\n\n  function filterByPrefix(tables, prefix) {\n    return tables.filter(checkPrefix(prefix)).map(removePrefix);\n  }\n\n  var classes = filterByPrefix(tables, '.');\n  var ids = filterByPrefix(tables, '#');\n  return attr && (includes(classes, attr['class']) || includes(ids, attr['id']));\n}\n\nfunction walk(dom, options, result) {\n  if (arguments.length < 3) {\n    result = '';\n  }\n\n  var whiteSpaceRegex = /\\s$/;\n  var format = Object.assign({}, defaultFormat, options.format);\n\n  if (!dom) {\n    return result;\n  }\n\n  dom.forEach(function (elem) {\n    switch (elem.type) {\n      case 'tag':\n        switch (elem.name.toLowerCase()) {\n          case 'img':\n            result += format.image(elem, options);\n            break;\n\n          case 'a':\n            // Inline element needs its leading space to be trimmed if `result`\n            // currently ends with whitespace\n            elem.trimLeadingSpace = whiteSpaceRegex.test(result);\n            result += format.anchor(elem, walk, options);\n            break;\n\n          case 'p':\n            result += format.paragraph(elem, walk, options);\n            break;\n\n          case 'h1':\n          case 'h2':\n          case 'h3':\n          case 'h4':\n          case 'h5':\n          case 'h6':\n            result += format.heading(elem, walk, options);\n            break;\n\n          case 'br':\n            result += format.lineBreak(elem, walk, options);\n            break;\n\n          case 'hr':\n            result += format.horizontalLine(elem, walk, options);\n            break;\n\n          case 'ul':\n            result += format.unorderedList(elem, walk, options);\n            break;\n\n          case 'ol':\n            result += format.orderedList(elem, walk, options);\n            break;\n\n          case 'pre':\n            var newOptions = Object.assign({}, options);\n            newOptions.isInPre = true;\n            result += format.paragraph(elem, walk, newOptions);\n            break;\n\n          case 'table':\n            result = containsTable(elem.attribs, options.tables) ? result + format.table(elem, walk, options) : walk(elem.children || [], options, result);\n            break;\n\n          case 'blockquote':\n            result += format.blockquote(elem, walk, options);\n            break;\n\n          default:\n            result = walk(elem.children || [], options, result);\n        }\n\n        break;\n\n      case 'text':\n        if (elem.data !== '\\r\\n') {\n          // Text needs its leading space to be trimmed if `result`\n          // currently ends with whitespace\n          elem.trimLeadingSpace = whiteSpaceRegex.test(result);\n          result += format.text(elem, options);\n        }\n\n        break;\n\n      default:\n        if (!includes(SKIP_TYPES, elem.type)) {\n          result = walk(elem.children || [], options, result);\n        }\n\n    }\n\n    options.lineCharCount = result.length - (result.lastIndexOf('\\n') + 1);\n  });\n  return result;\n}\n\nexports.fromString = function (str, options) {\n  return htmlToText(str, options || {});\n};","map":null,"metadata":{},"sourceType":"script"}