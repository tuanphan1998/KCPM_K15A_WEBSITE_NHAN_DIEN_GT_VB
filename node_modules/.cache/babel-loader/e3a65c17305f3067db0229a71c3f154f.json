{"ast":null,"code":"var _jsxFileName = \"e:\\\\NODE_JS\\\\DM\\\\KCPM_K15A_WEBSITE_NHAN_DIEN_GT_VB\\\\src\\\\components\\\\ShowData\\\\LuuData\\\\ShowDataNow.js\";\nimport React, { Component } from 'react';\nimport jsPDF from 'jspdf';\n\nclass ShowDataNow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datapdf: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://v2018.api2pdf.com/chrome/html', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': '9b420367-237d-4c15-b948-ee42b83b4735' //Get your API key from \n\n      },\n      body: JSON.stringify({\n        html: this.props.vanbans,\n        inlinePdf: true,\n        fileName: 'test.pdf'\n      })\n    }).then(res => res.json()).then(res => {\n      this.setState({\n        datapdf: res.pdf\n      });\n    });\n  }\n\n  convertHtmlToPdf(e) {\n    var doc = new jsPDF('p', 'in', 'letter'),\n        sizes = [12, 16, 20],\n        fonts = [['Times', 'Roman']],\n        font,\n        size,\n        lines,\n        margin = 0.5,\n        // inches on a 8.5 x 11 inch sheet.\n    verticalOffset = margin,\n        loremipsum = 'Sorry system update'; // Margins:\n\n    doc.setDrawColor(0, 255, 0).setLineWidth(1 / 72).line(margin, margin, margin, 11 - margin).line(8.5 - margin, margin, 8.5 - margin, 11 - margin); // the 3 blocks of text\n\n    for (var i in fonts) {\n      if (fonts.hasOwnProperty(i)) {\n        font = fonts[i];\n        size = sizes[i];\n        lines = doc.setFont(font[0], font[1]).setFontSize(size).splitTextToSize(loremipsum, 7.5); // Don't want to preset font, size to calculate the lines?\n        // .splitTextToSize(text, maxsize, options)\n        // allows you to pass an object with any of the following:\n        // {\n        // \t'fontSize': 12\n        // \t, 'fontStyle': 'Italic'\n        // \t, 'fontName': 'Times'\n        // }\n        // Without these, .splitTextToSize will use current / default\n        // font Family, Style, Size.\n\n        doc.text(0.5, verticalOffset + size / 72, lines);\n        verticalOffset += (lines.length + 0.5) * size / 72;\n      }\n    }\n\n    doc.save('a4.pdf');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"my-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Save text\", React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Save audio\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"img-fluid komask\",\n      src: this.props.hinhanh,\n      alt: \"demo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-4 size_text_one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"my-3 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"M\\xF4 t\\u1EA3 t\\u1EA3i li\\u1EC7u\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.props.vanbans.slice(0, 300) + \"...\"), React.createElement(\"h3\", {\n      className: \"my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Th\\u1EBB g\\u1EE3i t\\u1EEB\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.props.hashtag)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Dowload file text\"), React.createElement(\"ul\", {\n      className: \"padding_left\",\n      style: {\n        paddingLeft: '0px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      onClick: this.convertHtmlToPdf.bind(this),\n      src: \"https://cdn1.iconfinder.com/data/icons/adobe-acrobat-pdf/154/adobe-acrobat-pdf-file-512.png\",\n      className: \"size_image\",\n      alt: \"demo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Length Text\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.props.vanbans.length), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Audio Language\"), React.createElement(\"video\", {\n      className: \"deme\",\n      style: {\n        height: '50px',\n        width: '310px'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: this.props.amthanh,\n      type: \"video/mp4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })))), React.createElement(\"h3\", {\n      className: \"my-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"V\\u0103n b\\u1EA3n \\u0111\\u01B0\\u1EE3c h\\u1EC7 th\\u1ED1ng nh\\u1EADn\"), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"form-control size\",\n      rows: \"7\",\n      cols: \"20\",\n      placeholder: \"Search...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.props.vanbans)))), React.createElement(\"h3\", {\n      className: \"my-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Convet text to PDF\"), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"embed-responsive embed-responsive-16by9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"iframe\", {\n      class: \"embed-responsive-item\",\n      src: this.state.datapdf,\n      allowfullscreen: true,\n      title: \"sd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default ShowDataNow;","map":{"version":3,"sources":["e:\\NODE_JS\\DM\\KCPM_K15A_WEBSITE_NHAN_DIEN_GT_VB\\src\\components\\ShowData\\LuuData\\ShowDataNow.js"],"names":["React","Component","jsPDF","ShowDataNow","constructor","props","state","datapdf","componentDidMount","fetch","method","headers","body","JSON","stringify","html","vanbans","inlinePdf","fileName","then","res","json","setState","pdf","convertHtmlToPdf","e","doc","sizes","fonts","font","size","lines","margin","verticalOffset","loremipsum","setDrawColor","setLineWidth","line","i","hasOwnProperty","setFont","setFontSize","splitTextToSize","text","length","save","render","hinhanh","slice","hashtag","paddingLeft","bind","height","width","amthanh"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport jsPDF from 'jspdf';\r\nclass ShowDataNow extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            datapdf : ''\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch('https://v2018.api2pdf.com/chrome/html', {\r\n            method: 'post',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json',\r\n              'Authorization': '9b420367-237d-4c15-b948-ee42b83b4735' //Get your API key from \r\n            },\r\n            body: JSON.stringify({html:  this.props.vanbans, inlinePdf: true, fileName: 'test.pdf' })\r\n          }).then(res=>res.json())\r\n            .then((res) =>{\r\n              this.setState({\r\n                datapdf : res.pdf\r\n              })\r\n            });\r\n    }\r\n\r\n    convertHtmlToPdf(e) {\r\n        var doc = new jsPDF('p', 'in', 'letter'),\r\n        sizes = [12, 16, 20],\r\n        fonts = [['Times', 'Roman']],\r\n        font, size, lines,\r\n        margin = 0.5, // inches on a 8.5 x 11 inch sheet.\r\n        verticalOffset = margin,\r\n        loremipsum = 'Sorry system update'\r\n\r\n        // Margins:\r\n        doc.setDrawColor(0, 255, 0)\r\n        .setLineWidth(1 / 72)\r\n        .line(margin, margin, margin, 11 - margin)\r\n        .line(8.5 - margin, margin, 8.5 - margin, 11 - margin)\r\n\r\n        // the 3 blocks of text\r\n        for (var i in fonts) {\r\n        if (fonts.hasOwnProperty(i)) {\r\n          font = fonts[i]\r\n          size = sizes[i]\r\n\r\n          lines = doc.setFont(font[0], font[1])\r\n                .setFontSize(size)\r\n                .splitTextToSize(loremipsum, 7.5)\r\n          // Don't want to preset font, size to calculate the lines?\r\n          // .splitTextToSize(text, maxsize, options)\r\n          // allows you to pass an object with any of the following:\r\n          // {\r\n          // \t'fontSize': 12\r\n          // \t, 'fontStyle': 'Italic'\r\n          // \t, 'fontName': 'Times'\r\n          // }\r\n          // Without these, .splitTextToSize will use current / default\r\n          // font Family, Style, Size.\r\n          doc.text(0.5, verticalOffset + size / 72, lines)\r\n\r\n          verticalOffset += (lines.length + 0.5) * size / 72\r\n        }\r\n        }\r\n        doc.save('a4.pdf')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n            <h1 className=\"my-4\">Save text\r\n                <small>Save audio</small>\r\n            </h1>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-8\">\r\n                    <img className=\"img-fluid komask\" src={this.props.hinhanh} alt=\"demo\" />\r\n                </div>\r\n                \r\n                <div className=\"col-md-4 size_text_one\">\r\n                    <h3 className=\"my-3 \">Mô tả tải liệu</h3>\r\n                    <p>{this.props.vanbans.slice(0,300) + \"...\"}</p>\r\n                    <h3 className=\"my-3\">Thẻ gợi từ</h3>\r\n                    <ul>\r\n                            <i>{this.props.hashtag}</i>\r\n                    </ul>\r\n                    <h3>Dowload file text</h3>\r\n                    <ul className=\"padding_left\" style={{paddingLeft: '0px'}}>\r\n                            <img onClick={this.convertHtmlToPdf.bind(this)}  src=\"https://cdn1.iconfinder.com/data/icons/adobe-acrobat-pdf/154/adobe-acrobat-pdf-file-512.png\"  className=\"size_image\" alt=\"demo\"/>\r\n                    </ul>\r\n                    <h3>Length Text</h3>\r\n                    <span>{this.props.vanbans.length}</span>\r\n                    <h3>Audio Language</h3>\r\n                    <video className=\"deme\" style={{height: '50px',width: '310px'}}  controls>\r\n                            <source  src={this.props.amthanh} type=\"video/mp4\" />\r\n                    </video>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n    <h3 className=\"my-4\">Văn bản được hệ thống nhận</h3>\r\n    <div className=\"row\">\r\n        <div className=\"col-12\">\r\n              <div className=\"form-group\">\r\n                <textarea className=\"form-control size\"   rows=\"7\" cols=\"20\" placeholder=\"Search...\">\r\n                    {this.props.vanbans}\r\n                </textarea>\r\n              </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <h3 className=\"my-4\">Convet text to PDF</h3>\r\n    <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div class=\"embed-responsive embed-responsive-16by9\">\r\n            <iframe class=\"embed-responsive-item\" src={this.state.datapdf} allowfullscreen title=\"sd\"></iframe>\r\n          </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShowDataNow;"]},"metadata":{},"sourceType":"module"}